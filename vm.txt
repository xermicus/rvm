Currently it's an 8bit VM.

Instructions are 16bit wide:
1x 4bit for register
1x 4bit instructions
1x 8bit for value

registers: 
	r0	0	general purpose registers
	r1	1	general purpose registers
	r2	2	general purpose registers
	r3	3	general purpose registers
	r4	4	general purpose registers
	r5	5	general purpose registers
	r6	6	general purpose registers
	r7	7	general purpose registers
	rn	8	next instruction
	rd	9	data pointer
	rf	A	flag register: 0=equal =, 1=less <, 2=greater >
	rc	B	conditional register: 0=equal =, 1=less<, 2=great >
	rs	C	interrupt register

instructions:
	opcode  #	target	value	description
	int	0	sys	null	interrupt according to rs register. 0 = hlt, 1 = syscall
	set	1	rX	u8	load value into register
	psh	2	rX	rX	push register to stack (pointer @rd). push all registers between target and value if target != value (absolute distance upward). increases rd for free
	pop	3	rX	rX	pop value from data section. analog to psh
	add	4	rX	rX	addition, result in target
	sub	5	rX	rX	subtraction, result in target
	mul	6	rX	rX	multiplication, result in target
	div	7	rX	rX	division, result in target
	chk	8	rX	rX	compare target register to value register. sets flag register (see rf)
	cns	9	rX	rX	conditional set: set register depending on rf to value according to cr. eg: (chk r0, r1; set rc 0; cns rn r2) will set rn to r2 if r0 = r1
	lpt	A	rX	rX	load pointer: loads value to target register at stack offset in value register
	lsh	B	rX	rX	left shift
	rsh	C	rX	rX	right shift
	and	D	rX	rX	bitwise and
	bor	E	rX	rX	bitwise or
	xor	F	rX	rX	bitwise xor

calls:
	PRINTLINE	print chars from stack until null is reached, starting from pointer in r0
	READLINE	reads chars and push them to stack until \n is reached

